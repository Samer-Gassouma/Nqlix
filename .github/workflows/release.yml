name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            targets: ["msi", "nsis", "updater"]
          - os: ubuntu-latest
            platform: linux
            targets: ["appimage"]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Setup signing key
        if: matrix.platform == 'windows'
        run: |
          $keyPath = "$env:USERPROFILE\.tauri\nqlix_desktop_app.key"
          $keyDir = Split-Path $keyPath -Parent
          if (-not (Test-Path $keyDir)) {
            New-Item -ItemType Directory -Path $keyDir -Force
          }
          echo "$env:TAURI_PRIVATE_KEY" | Out-File -FilePath $keyPath -Encoding utf8
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      - name: Setup signing key (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p ~/.tauri
          echo "$TAURI_PRIVATE_KEY" > ~/.tauri/nqlix_desktop_app.key
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            patchelf \
            libayatana-appindicator3-dev

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: List build artifacts (for debugging)
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            echo "Listing Linux build artifacts:"
            find src-tauri/target/release/bundle/ -type f -name "*" | sort
            echo "AppImage files:"
            ls -la src-tauri/target/release/bundle/appimage/ || echo "No appimage directory"
          else
            echo "Listing Windows build artifacts:"
            Get-ChildItem -Recurse src-tauri/target/release/bundle/ | Select-Object FullName
            
            echo "`nChecking for updater files:"
            echo "MSI Updater files:"
            Get-ChildItem src-tauri/target/release/bundle/msi/ -Name | Where-Object { $_ -like "*.zip*" }
            echo "NSIS Updater files:"
            Get-ChildItem src-tauri/target/release/bundle/nsis/ -Name | Where-Object { $_ -like "*.zip*" }
            
            echo "`nFull MSI directory contents:"
            Get-ChildItem src-tauri/target/release/bundle/msi/ -Name
            echo "`nFull NSIS directory contents:"
            Get-ChildItem src-tauri/target/release/bundle/nsis/ -Name
          fi

      - name: Upload Windows artifacts
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/msi/*.zip
            src-tauri/target/release/bundle/msi/*.zip.sig
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/nsis/*.zip
            src-tauri/target/release/bundle/nsis/*.zip.sig

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/appimage/*.tar.gz
            src-tauri/target/release/bundle/appimage/*.tar.gz.sig

  release-assets:
    needs: [create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-build/*
            artifacts/linux-build/*
          draft: false
          prerelease: false
          body: |
            ## What's Changed
            
            This release includes the latest updates for Nqlix Desktop Application.
            
            ## Installation
            
            Download the appropriate installer for your system:
            - **Windows (MSI)**: Use the `.msi` file for automatic installation
            - **Windows (NSIS)**: Use the `.exe` file for manual installation
            - **Linux (AppImage)**: Use the `.AppImage` file for Linux systems
            
            ## Auto-Update
            
            The application will automatically check for updates and notify you when a new version is available.
            
            ### Updater Files Included:
            - **Windows MSI**: `.msi.zip` and `.msi.zip.sig` files
            - **Windows NSIS**: `.exe.zip` and `.exe.zip.sig` files
            - **Linux AppImage**: `.tar.gz` and `.tar.gz.sig` files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}